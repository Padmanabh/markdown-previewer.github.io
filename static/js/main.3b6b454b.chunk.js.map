{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","components","code","node","inline","className","children","props","match","exec","language","PreTag","String","replace","useState","placeholder","setPlaceholder","id","value","onChange","e","target","remarkPlugins","gfm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sXA6EeA,MAtEf,WACE,IAAMC,EAAa,CACjBC,KADiB,YACmC,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,SAAaC,EAAQ,iBAC5CC,EAAQ,iBAAiBC,KAAKJ,GAAa,IACjD,OAAQD,GAAUI,EAChB,cAAC,IAAD,aAAmBE,SAAUF,EAAM,GAAIG,OAAO,MAAML,SAAUM,OAAON,GAAUO,QAAQ,MAAO,KAASN,IAEvG,8CAAMF,UAAWA,GAAeE,GAAhC,aACGD,OAOT,EAAsCQ,mBAAS,wpCAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA6CA,OACE,sBAAKX,UAAU,MAAf,UACE,0BAAUY,GAAG,SAASF,YAAY,2BAA2BG,MAAOH,EAAaI,SAAU,SAACC,GAAMJ,EAAeI,EAAEC,OAAOH,UAC1H,qBAAKD,GAAG,UAAR,SACA,cAAC,IAAD,CAAehB,WAAYA,EAAYqB,cAAe,CAACC,KAAMjB,SAAUS,UC3D9DS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b6b454b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport gfm from 'remark-gfm';\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport './App.css';\n\nfunction App() {\n  const components = {\n    code({node, inline, className, children, ...props}) {\n      const match = /language-(\\w+)/.exec(className || '')\n      return !inline && match ? (\n        <SyntaxHighlighter language={match[1]} PreTag=\"div\" children={String(children).replace(/\\n$/, '')} {...props} />\n      ) : (\n        <code className={className} {...props}>\n          {children}\n        </code>\n      )\n    }\n  }\n  \n\n  const [placeholder, setPlaceholder] = useState(`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n~~~js\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n~~~\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`);\n\n\n\n  return (\n    <div className=\"App\">\n      <textarea id=\"editor\" placeholder=\"enter markdown text here\" value={placeholder} onChange={(e)=> {setPlaceholder(e.target.value)}}></textarea>\n      <div id=\"preview\" >\n      <ReactMarkdown components={components} remarkPlugins={[gfm]} children={placeholder}></ReactMarkdown>        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}